class Solution {
    public int largestRectangleArea(int[] heights) {
        int n = heights.length;
        int[] nsl = new int[n];  //next smaller left
        int[] nsr = new int[n];  //next smaller right
        Stack<Integer> st = new Stack<Integer>();

        //next smaller left
        for(int i=0; i<n; i++){
            while(!st.isEmpty() && heights[st.peek()] >= heights[i]){
                st.pop();
            }
            if(st.isEmpty()) nsl[i] = -1;
            else nsl[i] = st.peek();

            st.push(i);
        }

        //next smaller right
        st = new Stack<>();
        for(int i=n-1; i>=0; i--){
            while(!st.isEmpty() && heights[st.peek()] >= heights[i]){
                st.pop();
            }
            if(st.isEmpty()) nsr[i] = n;
            else nsr[i] = st.peek();

            st.push(i);
        }

        int area = 0;
        for(int i=0; i<n; i++){
            int width = nsr[i] - nsl[i] - 1;
            int ar = width * heights[i];
            area = Math.max(area, ar);
        }
        return area;
    }
}
