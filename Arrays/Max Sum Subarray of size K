class Solution {
    //Time Complexity = O(n)
    public int maxSubarraySum(int[] arr, int k) {
        // Code here
        int curSum = 0;
        int maxSum = 0;
        int n = arr.length;
        int left =0, right = k;

        for(int i=left; i<=k-1; i++){
            curSum += arr[i];
            maxSum = Math.max(maxSum, curSum);
        }
        
        while(left < n-k){
            curSum = curSum - arr[left] + arr[right];
            maxSum = Math.max(maxSum, curSum);
            left++;
            right++;
        }
        
        return maxSum;
    }

    //Time complexity
    int curSum = 0;
        int maxSum = 0;
        int n = arr.length;

        for(int i=0; i<=n-k; i++){
            for(int j=i; j<=i+k-1; j++){
                curSum += arr[j];
            }
            maxSum = Math.max(maxSum, curSum);
            curSum = 0;
        }
        
        return maxSum;
}
